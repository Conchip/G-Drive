두번째 챕터

김철수는 복권을 샀다

과거 커밋으로 가기
■ git checkout (커밋 별명)

원래 상태로 되돌아오기
■ git checkout master

■ 현재 커밋 삭제 & 과거 커밋으로 가기 (하드 리셋)
git reset --hard HEAD^
--hard ▷삭제하다
HEAD^ ▷ 한 커밋 이전으로 되돌아가기
HEAD^^ ▷ 두 커밋 ~~
HEAD^^^ ▷ 세 커밋 ~~

■ 강제로 푸시하기
git push origin master --force

■ 복합 리셋
▷ 커밋만 삭제하고 파일 변경 사항은 그대로 둔다.
▷ 변경 사항들을 unstage 영역에 둔다.

하드 리셋 - 파일 변경 내역을 유지하지 않는다.
복합 리셋 - 변경한 파일의 내용은 그대로 둔다.

■ 원격저장소 확인
git remote -v
■ origin에서 코드가져오기
git pull origin master

■ 소포트 리셋
▷ 되돌릴 커밋의 변경사항을 unstage 영역에 추가하지 않고
stage 영역에 추가한다.
▷ unstage 영역에 작업중인 파일이 있을 때 섞이지 않고 싶을 때 사용한다.

대부분의 경우에는 하드 리셋이나 복합 리셋을 사용하면 된다.

■ 새 브랜치 만들기
git checkout -b (브랜치명)
※한꺼번에 하기
git checkout (커밋별명) -b (브랜치명)

■ 마스터 브랜치로 돌아가기
git checkout master

■ 브랜치 목록 보기
git branch


■ 브랜치 삭제
git branch -d (브랜치명)

■ 커밋 수정
▷ 커밋 수정(amend)은 가장 마지막 커밋을 수정하는 것
git commit --amend -m "(메시지)"
git commit --amend --no-edit
--no-edit ▷ 커밋 메세지는 수정하지 않는다

■ 커밋할 때 파일들의 상태보기
git status
▷ stage 영역에 있지 않은 파일은 빨간색으로 표시
▷ stage 영역에 있는 파일은 초록색으로 표시

■ .gitignore파일에 git에 추가하고 싶지 않은 파일이나 폴더 입력
폴더를 추가하는 방법 ▷ /(폴더명)

■ stage 영역에서 제거
git rm -r (제거할 것) --cached
-r ▷ 폴더 제거시 사용